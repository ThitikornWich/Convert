import streamlit as st
import pandas as pd
import re
import io
from docx import Document

def extract_sections_from_doc(doc_file):
    # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Word
    doc = Document(doc_file)
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏∏‡∏Å cell ‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á + ‡∏ó‡∏∏‡∏Å paragraph (‡πÑ‡∏°‡πà‡∏ï‡∏Å‡∏´‡∏•‡πà‡∏ô)
    all_lines = []
    # ‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    for table in doc.tables:
        for row in table.rows:
            for cell in row.cells:
                text = cell.text.strip()
                if text:
                    all_lines.extend([t for t in text.split('\n') if t.strip()])
    # ‡∏¢‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤
    for para in doc.paragraphs:
        t = para.text.strip()
        if t:
            all_lines.append(t)

    # ‡∏£‡∏ß‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏∏‡∏Å‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà clean ‡πÅ‡∏•‡πâ‡∏ß
    lines = [l.strip() for l in all_lines if l.strip()]
    
    # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏´‡∏≤ value ‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏á label (case-insensitive)
    def extract_after_label(label):
        for i, line in enumerate(lines):
            if re.search(rf'^{label}\b', line, re.IGNORECASE):
                # ‡πÄ‡∏ä‡πà‡∏ô Title: xxx
                m = re.match(rf'{label}[:Ôºö\s]*(.+)', line, re.IGNORECASE)
                if m:
                    return m.group(1).strip()
                # ‡∏´‡∏£‡∏∑‡∏≠ Title [‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà]
                elif i+1 < len(lines):
                    return lines[i+1].strip()
        return ""
    
    # Title
    title = extract_after_label("Title")
    # Description
    description = extract_after_label("Description")
    # H1 (Heading 1)
    h1 = extract_after_label("H1")
    if not h1:
        h1 = extract_after_label("Heading 1")
    
    # Product Section
    product_section = ""
    # pattern ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á ------- Product Section --------- ‡∏´‡∏£‡∏∑‡∏≠ Product Section ‡πÄ‡∏â‡∏¢‡πÜ
    for i, line in enumerate(lines):
        if re.search(r'(?:-{3,}\s*)?Product\s*Section', line, re.IGNORECASE):
            # ‡πÄ‡∏≠‡∏≤‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢ ‡πÜ ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏à‡∏≠‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏ö
            j = i + 1
            part = []
            while j < len(lines):
                # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠ label ‡πÉ‡∏´‡∏°‡πà (Title, Description, H1, Heading 1, Slug, ‡∏´‡∏£‡∏∑‡∏≠ Product Section ‡∏≠‡∏µ‡∏Å)
                if re.search(r'^(Title|Description|H1|Heading 1|Slug|Product\s*Section)\b', lines[j], re.IGNORECASE):
                    break
                part.append(lines[j])
                j += 1
            product_section = "\n".join(part).strip()
            break

    return {
        'Title': title,
        'Description': description,
        'Heading 1': h1,
        'Product Section': product_section
    }

# ========== Streamlit UI ==========
st.title("Word Content Extractor (Title, Description, H1, Product Section)")
st.write("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Word (.docx) ‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞ export ‡πÄ‡∏õ‡πá‡∏ô CSV/XLSX")

uploaded_files = st.file_uploader(
    "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î Word Documents (.docx)", 
    type=["docx"], 
    accept_multiple_files=True,
    help="‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ"
)

if uploaded_files:
    st.info(f"‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(uploaded_files)} ‡πÑ‡∏ü‡∏•‡πå")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
    with st.expander(f"üìÅ ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î ({len(uploaded_files)} ‡πÑ‡∏ü‡∏•‡πå)"):
        for i, file in enumerate(uploaded_files, 1):
            st.write(f"{i}. {file.name} ({file.size:,} bytes)")
    
    if st.button("üöÄ Start Process All Files", type="primary"):
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        all_results = []
        
        for i, uploaded_file in enumerate(uploaded_files):
            status_text.text(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: {uploaded_file.name} ({i+1}/{len(uploaded_files)})")
            progress_bar.progress((i + 1) / len(uploaded_files))
            
            try:
                extracted = extract_sections_from_doc(uploaded_file)
                # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏£‡∏Å
                result = {
                    'Filename': uploaded_file.name,
                    'Title': extracted['Title'],
                    'Description': extracted['Description'],
                    'Heading 1': extracted['Heading 1'],
                    'Product Section': extracted['Product Section']
                }
                all_results.append(result)
            except Exception as e:
                st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå {uploaded_file.name}: {str(e)}")
                # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• error
                result = {
                    'Filename': uploaded_file.name,
                    'Title': f'Error: {str(e)}',
                    'Description': '',
                    'Heading 1': '',
                    'Product Section': ''
                }
                all_results.append(result)
        
        status_text.text("‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
        
        if all_results:
            st.success(f"‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: {len(all_results)} ‡πÑ‡∏ü‡∏•‡πå")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            df = pd.DataFrame(all_results)
            
            st.subheader("üìã ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:")
            st.dataframe(df, use_container_width=True)
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
            st.subheader("üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•:")
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                successful_files = len([r for r in all_results if not r['Title'].startswith('Error:')])
                st.metric("‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", successful_files, f"‡∏à‡∏≤‡∏Å {len(all_results)}")
            
            with col2:
                title_count = len([r for r in all_results if r['Title'] and not r['Title'].startswith('Error:')])
                st.metric("‡∏°‡∏µ Title", title_count)
            
            with col3:
                desc_count = len([r for r in all_results if r['Description']])
                st.metric("‡∏°‡∏µ Description", desc_count)
            
            with col4:
                product_count = len([r for r in all_results if r['Product Section']])
                st.metric("‡∏°‡∏µ Product Section", product_count)
            
            # ‡∏õ‡∏∏‡πà‡∏° Export
            st.subheader("üíæ Export ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:")
            col1, col2 = st.columns(2)
            
            with col1:
                # Export CSV
                csv_buffer = io.StringIO()
                df.to_csv(csv_buffer, index=False, encoding='utf-8-sig')
                st.download_button(
                    "üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏õ‡πá‡∏ô CSV", 
                    csv_buffer.getvalue(), 
                    file_name=f"extracted_content_{len(uploaded_files)}_files.csv",
                    mime="text/csv",
                    use_container_width=True
                )
            
            with col2:
                # Export XLSX
                xlsx_buffer = io.BytesIO()
                with pd.ExcelWriter(xlsx_buffer, engine='xlsxwriter') as writer:
                    df.to_excel(writer, index=False, sheet_name='Extracted Content')
                    # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
                    worksheet = writer.sheets['Extracted Content']
                    for idx, col in enumerate(df.columns):
                        max_length = max(
                            df[col].astype(str).apply(len).max(),
                            len(col)
                        )
                        worksheet.set_column(idx, idx, min(max_length + 2, 50))
                
                st.download_button(
                    "üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏õ‡πá‡∏ô XLSX", 
                    xlsx_buffer.getvalue(), 
                    file_name=f"extracted_content_{len(uploaded_files)}_files.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    use_container_width=True
                )
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå
            st.subheader("üìÑ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå:")
            for i, result in enumerate(all_results, 1):
                with st.expander(f"üìÑ {i}. {result['Filename']}"):
                    if result['Title'].startswith('Error:'):
                        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {result['Title']}")
                    else:
                        col1, col2 = st.columns(2)
                        with col1:
                            st.write("**Title:**")
                            st.text_area("", result['Title'], height=60, key=f"title_{i}")
                            st.write("**Heading 1:**")
                            st.text_area("", result['Heading 1'], height=60, key=f"h1_{i}")
                        
                        with col2:
                            st.write("**Description:**")
                            st.text_area("", result['Description'], height=60, key=f"desc_{i}")
                            st.write("**Product Section:**")
                            st.text_area("", result['Product Section'], height=100, key=f"product_{i}")
else:
    st.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Word Document (.docx) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô")
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    with st.expander("üìã ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"):
        st.markdown("""
        **‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå:**
        1. ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° "Browse files" 
        2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå Word (.docx) ‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô (‡πÉ‡∏ä‡πâ Ctrl+Click ‡∏´‡∏£‡∏∑‡∏≠ Shift+Click)
        3. ‡∏Å‡∏î "Start Process All Files" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ó‡∏∏‡∏Å‡πÑ‡∏ü‡∏•‡πå
        
        **‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö:**
        - Title: ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "Title" ‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
        - Description: ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "Description" ‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£  
        - H1: ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "H1" ‡∏´‡∏£‡∏∑‡∏≠ "Heading 1"
        - Product Section: ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "Product Section" (‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏î‡∏∂‡∏á‡∏°‡∏≤)
        
        **‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:**
        - ‡πÑ‡∏ü‡∏•‡πå CSV/XLSX ‡∏à‡∏∞‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        - ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏£‡∏Å‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏¢‡∏Å‡πÅ‡∏¢‡∏∞
        """)

